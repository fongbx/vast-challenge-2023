---
title: "Data Preparation"
date: "8 June 2023"
date-modified: "`r Sys.Date()`"
---

# Getting Started

## Import R Packages

```{r}
pacman::p_load(tidyverse, lubridate, jsonlite, tidygraph, ggraph,
               visNetwork, igraph, plotly, RColorBrewer, DT)
```

## Import Data

We will use `fromJSON()` of **jsonlite**Â package to import *mc2_challenge_graph.json* into the R environment.

```{r}
mc2 <- fromJSON("data/mc2_challenge_graph.json")
```

# Data Wrangling

## Step 1: Extract the nodes

```{r}
# extract all nodes
mc2_nodes_all <- as_tibble(mc2$nodes) %>% 
  select(id, shpcountry, rcvcountry)

datatable(mc2_nodes_all, class = "display")
```

## Step 2: Extract the edges

```{r}
mc2_edges_all <- as_tibble(mc2$links) %>% 
  mutate(ArrivalDate = ymd(arrivaldate)) %>% 
  mutate(Year = year(ArrivalDate)) %>% 
  mutate(Month = month(ArrivalDate)) %>% 
  select(source, target, ArrivalDate, Year, Month, hscode, valueofgoods_omu,
         volumeteu, weightkg, valueofgoodsusd) %>% 
  distinct()

datatable(head(mc2_edges_all, 5), class = "display")
```

## Step 3: Filter HSCode

Our primary goal is to identify companies engaged in illegal fishing activities. In accordance with information from [external sources](https://connect2india.com/hs-classification.html), we need to focus on filtering out those companies with Harmonized System (HS) code prefixes ranging from 301 to 309.

```{r}
mc2_edges_fishing <- mc2_edges_all %>%
  filter(str_sub(hscode, 1, 3) %in% c("301", "302", "303", "304", "305", "306", "307", "308", "309"))
```

## Step 4. Replace missing values in "valueofgoodsusd"

We discovered that the columns "valueofgoodsusd" and "valueofgoods_omu" both contained missing values. Some rows, however, provided values in both of these columns. Utilising this information, we were able to ascertain a conversion rate of 1.5384 (omu/usd). This conversion rate was subsequently employed to fill in the missing data in these columns.

```{r}
conversion_rate <- 1.5384 
mc2_edges_fishing$valueofgoodsusd <- ifelse(is.na(mc2_edges_fishing$valueofgoodsusd), 
                              round(mc2_edges_fishing$valueofgoods_omu / conversion_rate,0), 
                              mc2_edges_fishing$valueofgoodsusd)

mc2_edges_fishing <- mc2_edges_fishing %>%
  select(source, target, ArrivalDate, Year, Month, hscode, volumeteu, weightkg, valueofgoodsusd)
```

## Step 5. Aggregate shipment frequency, total weight and value for each source and target pair

As the edges are very numerous, we will filter out source-target pairs that have traded 20 times or more throughout all the years. From the filtered source-target pairs, we will aggregate the shipment counts to get the shipment frequency, sum the total weight kg and sum the total value of goods usd. Three sets of data will be prepared to facilitate different types of analyses:

-   Aggregation by year and month - for performing analysis by year and month
-   Aggregation by year - for performing analysis by year
-   Total aggregation - for performing analysis across the entire period

```{r}
# filter out edges with total shipping frequency of at least 20 across all years
mc2_edges_fishing_filtered <- mc2_edges_fishing %>% 
  group_by(source, target) %>% 
  summarise(weights = n()) %>% 
  filter(weights > 20) %>% 
  filter(source!=target) %>%
  ungroup() %>% 
  select(source, target)

# aggregation by year and month
mc2_edges_agg_year_month <- mc2_edges_fishing %>% 
  inner_join(mc2_edges_fishing_filtered, by = c("source", "target")) %>% 
  group_by(source, target, Year, Month) %>% 
  summarise(weights = n(),
            totalweightkg = sum(weightkg),
            totalvalueofgoodsusd = sum(valueofgoodsusd)) %>% 
  ungroup()

# aggregation by year
mc2_edges_agg_year <- mc2_edges_agg_year_month %>% 
  group_by(source, target, Year) %>%
  summarise(weights = sum(weights),
            totalweightkg = sum(totalweightkg),
            totalvalueofgoodsusd = sum(totalvalueofgoodsusd)) %>% 
  ungroup()

# aggegation throughout all years
mc2_edges_agg_all <- mc2_edges_agg_year %>%
  group_by(source, target) %>%
  summarise(weights = sum(weights),
            totalweightkg = sum(totalweightkg),
            totalvalueofgoodsusd = sum(totalvalueofgoodsusd)) %>% 
  ungroup()
```

## Step 6: Update nodes based on filtered edges

Instead of using the nodes data table extracted from *mc2*, we will prepare a new nodes data table by using the source and target fields of the filtered *mc2_edges_agg_al*l dataset. This is necessary to ensure that the nodes in nodes data tables include all the source and target values.

```{r}
# extract nodes from filtered edges
id1 <- mc2_edges_agg_all %>% 
  select(source) %>% 
  rename(id = source)

id2 <- mc2_edges_agg_all %>% 
  select(target) %>% 
  rename(id = target)

mc2_nodes_extracted <- rbind(id1, id2) %>% 
  distinct()

# left join with mc2_nodes_all to get shpcountry, rcvcountry info
mc2_nodes <- mc2_nodes_extracted %>%
  left_join(mc2_nodes_all, by="id")

# export files to csv
write_csv(mc2_edges_agg_year, "all_edges_year.csv")
write_csv(mc2_nodes, "all_nodes.csv")
```

# Identification of Red-Flagged Companies

In order to detect companies that may be engaged in illegal fishing practices, we utilised two methods centered around analysing their shipping frequency and identifying any unusual changes in the value of their shipments over time. Companies displaying both of these traits were regarded as suspicious and subsequently marked as potential entities involved in illegal fishing.

## Flag 1: Sudden changes in shipment frequency

An illegal fishing company is likely to significantly increase or decrease its shipment frequency suddenly. This can be a sign that the company is trying to avoid detection, manipulate market prices, or respond to changes in enforcement intensity.

Approach: calculate an average shipping frequency over a 2 year period and get a list of companies with sudden changes in their shipment volume over each time period compared to their threshold.

```{r}
# compute the percentage change in shipping frequency
mc2_frequency_pct <- mc2_edges_agg_year %>%
  group_by(source, target) %>%
  arrange(source, target, Year) %>%
  mutate(PercentageChange = weights / lag(weights) - 1) %>% 
  ungroup()

# set threshold of change to flag out
threshold <- 8

# flag out trades that meet red flag 1
mc2_red_flag1_edges <- mc2_frequency_pct %>%
  filter(abs(PercentageChange) > threshold)

# extract source-target pairs of these trades
mc2_red_flag1_pairs <- mc2_red_flag1_edges %>% 
  select(source, target) %>% 
  distinct()

# extract nodes of these trades (to also visualise the partners of top importers)
id1_red_flag1 <- mc2_red_flag1_pairs %>% 
  select(source) %>%
  rename(id = source)

id2_red_flag1 <- mc2_red_flag1_pairs %>%
  select(target) %>%
  rename(id = target)

red_flag1_nodes <- rbind(id1_red_flag1, id2_red_flag1) %>%
  distinct() %>% 
  left_join(mc2_nodes_all, by="id")

length(red_flag1_nodes$id)
```

## Flag 2: abnormal shipment values over years

An illegal fishing company might under-declare the weight of their catch to minimise attention and lower duties or taxes. On the other side, it might also over-declare the value of their shipment to over-insure it. These would lead to an abnormally high value-weight ratio.

Approach: In order to detect irregularities in the declared value of goods, we analyse the shipment values and shipment weight ratios for each fishing entity. We establish a threshold value that captures the range within which 95% of the data in the `value_weight_ratio_change` variable falls. If the `value_weight_ratio_change` surpasses this threshold, we flag the corresponding fishing company as having an abnormal occurrence.

```{r}
# compute the value-weight ratio and the value-weight ratio change
mc2_edges_fishing_stats <- mc2_edges_agg_year %>%
  group_by(source, target) %>%
  arrange(source, target, Year) %>%
  mutate(value_weight_ratio = totalvalueofgoodsusd / totalweightkg) %>%
  mutate(value_weight_ratio_change = value_weight_ratio / lag(value_weight_ratio) - 1) %>% 
  ungroup()

# set threshold of change to flag out
threshold <- quantile(mc2_edges_fishing_stats$value_weight_ratio_change, 0.95, na.rm = TRUE) 

# flag out trades that meet red flag 2
mc2_red_flag2_edges <- mc2_edges_fishing_stats %>%
  filter(abs(value_weight_ratio_change) > threshold)

# extract source-target pairs of these trades
mc2_red_flag2_pairs <- mc2_red_flag2_edges %>% 
  select(source, target) %>% 
  distinct()

# extract nodes of these trades (to also visualise the partners of top importers)
id1_red_flag2 <- mc2_red_flag2_pairs %>% 
  select(source) %>%
  rename(id = source)

id2_red_flag2 <- mc2_red_flag2_pairs %>%
  select(target) %>%
  rename(id = target)

red_flag2_nodes <- rbind(id1_red_flag2, id2_red_flag2) %>%
  distinct() %>% 
  left_join(mc2_nodes_all, by="id")

length(red_flag2_nodes$id)
```

## List of companies with red-flags

```{r}
# find our companies that meet two red flags
red_flagged_companies_both <- intersect(red_flag1_nodes, red_flag2_nodes)

# find our companies that meet any one red flag
red_flagged_companies_any <- rbind(red_flag1_nodes, red_flag2_nodes) %>%
  distinct()
```

# Identification of Top Exporters, Importers and Intermediaries

As the total number of companies are too numerous, we will concentrate our visualisation efforts on a few identified groups of companies, specifically:

-   Top 100 Exporters - identified by their out-degree centrality
-   Top 100 Importers - identified by their in-degree centrality
-   Top 100 Intermediaries - identified by their betweenness centrality

## Compute centrality measures

```{r}
# create the network graph 
centrality_graph <- tbl_graph(nodes = mc2_nodes,
                             edges = mc2_edges_agg_all,
                             directed = TRUE)

# calculate the centrality measures
centrality_graph <- centrality_graph %>%
  mutate(in_deg_centrality = centrality_degree(weights = weights, 
                                               mode = "in")) %>% 
  mutate(out_deg_centrality = centrality_degree(weights = weights, 
                                               mode = "out")) %>% 
  mutate(betweenness_centrality = centrality_betweenness()) 
```

## List of Top 100 Exporters

```{r}
# extract exporter nodes
exporter_nodes <- centrality_graph %>% 
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(out_deg_centrality)) %>%
  select(id, out_deg_centrality) %>% 
  head(n=100)

# extract edges with exporter nodes on ends (year_month and year granularity)
exporter_edges_year_month <- mc2_edges_agg_year_month %>%
  filter(source %in% exporter_nodes[['id']] | target %in% exporter_nodes[['id']])

exporter_edges_year <- mc2_edges_agg_year %>%
  filter(source %in% exporter_nodes[['id']] | target %in% exporter_nodes[['id']])

# extract nodes of these trades (to also visualise the partners of top exporters)
id1_exporter_edges <- exporter_edges_year_month %>% 
  select(source) %>%
  rename(id = source)

id2_exporter_edges <- exporter_edges_year_month %>%
  select(target) %>%
  rename(id = target)

exporter_nodes_and_partners <- rbind(id1_exporter_edges, id2_exporter_edges) %>%
  distinct() %>% 
  mutate(top_exporters = case_when(
    id %in% exporter_nodes[["id"]] ~ "Yes",
    TRUE ~ "No"
  )) %>% 
  mutate(red_flag1 = case_when(
    id %in% red_flag1_nodes[["id"]] ~ "Yes",
    TRUE ~ "No"
  )) %>% 
  mutate(red_flag2 = case_when(
    id %in% red_flag2_nodes[["id"]] ~ "Yes",
    TRUE ~ "No"
  )) %>% 
  left_join(mc2_nodes_all, by="id")

# export files to csv
write_csv(exporter_edges_year_month, "exporter_edges_year_month.csv")
write_csv(exporter_edges_year, "exporter_edges_year.csv")
write_csv(exporter_nodes_and_partners, "exporter_nodes_and_partners.csv")
```

## List of Top 100 Importers

```{r}
# extract importer nodes
importer_nodes <- centrality_graph %>% 
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(in_deg_centrality)) %>%
  select(id, in_deg_centrality) %>% 
  head(n=100)

# extract edges with importer nodes on ends (year_month and year granularity)
importer_edges_year_month <- mc2_edges_agg_year_month %>%
  filter(source %in% importer_nodes[['id']] | target %in% importer_nodes[['id']])

importer_edges_year <- mc2_edges_agg_year %>%
  filter(source %in% importer_nodes[['id']] | target %in% importer_nodes[['id']])

# extract nodes of these trades (to also visualise the partners of top importers)
id1_importer_edges <- importer_edges_year_month %>% 
  select(source) %>%
  rename(id = source)

id2_importer_edges <- importer_edges_year_month %>%
  select(target) %>%
  rename(id = target)

importer_nodes_and_partners <- rbind(id1_importer_edges, id2_importer_edges) %>%
  distinct() %>% 
  mutate(top_importers = case_when(
    id %in% importer_nodes[["id"]] ~ "Yes",
    TRUE ~ "No"
  )) %>% 
  mutate(red_flag1 = case_when(
    id %in% red_flag1_nodes[["id"]] ~ "Yes",
    TRUE ~ "No"
  )) %>% 
  mutate(red_flag2 = case_when(
    id %in% red_flag2_nodes[["id"]] ~ "Yes",
    TRUE ~ "No"
  )) %>% 
  left_join(mc2_nodes_all, by="id")

# export files to csv
write_csv(importer_edges_year_month, "importer_edges_year_month.csv")
write_csv(importer_edges_year, "importer_edges_year.csv")
write_csv(importer_nodes_and_partners, "importer_nodes_and_partners.csv")
```

## List of Top 100 Intermediaries

```{r}
# extract intermediary nodes
intermediary_nodes <- centrality_graph %>% 
  activate("nodes") %>% 
  as_tibble() %>% 
  arrange(desc(betweenness_centrality)) %>%
  select(id, betweenness_centrality) %>% 
  head(n=100)

# extract edges with intermediary nodes on ends (year_month and year granularity)
intermediary_edges_year_month <- mc2_edges_agg_year_month %>%
  filter(source %in% intermediary_nodes[['id']] | target %in% intermediary_nodes[['id']])

intermediary_edges_year <- mc2_edges_agg_year %>%
  filter(source %in% intermediary_nodes[['id']] | target %in% intermediary_nodes[['id']])

# extract nodes of these trades (to also visualise the partners of top importers)
id1_intermediary_edges <- intermediary_edges_year_month %>% 
  select(source) %>%
  rename(id = source)

id2_intermediary_edges <- intermediary_edges_year_month %>%
  select(target) %>%
  rename(id = target)

intermediary_nodes_and_partners <- rbind(id1_intermediary_edges, id2_intermediary_edges) %>%
  distinct() %>% 
  mutate(top_intermediaries = case_when(
    id %in% intermediary_nodes[["id"]] ~ "Yes",
    TRUE ~ "No"
  )) %>% 
  mutate(red_flag1 = case_when(
    id %in% red_flag1_nodes[["id"]] ~ "Yes",
    TRUE ~ "No"
  )) %>% 
  mutate(red_flag2 = case_when(
    id %in% red_flag2_nodes[["id"]] ~ "Yes",
    TRUE ~ "No"
  )) %>% 
  left_join(mc2_nodes_all, by="id")

# export files to csv
write_csv(intermediary_edges_year_month, "intermediary_edges_year_month.csv")
write_csv(intermediary_edges_year, "intermediary_edges_year.csv")
write_csv(intermediary_nodes_and_partners, "intermediary_nodes_and_partners.csv")
```
